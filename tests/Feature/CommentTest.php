<?php

namespace Tests\Feature;

use App\Models\Comment;
use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;

class CommentTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private $user;
    private $commentData;
    private $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Session::start();
        $this->user = User::factory()->create(['role_id' => 2]);
        $this->actingAs($this->user);
        $this->post = Post::factory()->create(['user_id' => $this->user->id]);
        $this->commentData = [
            '_token' => csrf_token(),
            'post_id' => $this->post->id,
            'comment' => 'post comment',
            'user_id' => $this->user->id
        ];
    }

    public function testComment(){
        $response = $this->post(route('comment', $this->post->id), $this->commentData);

        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $this->post->comments);
        $this->assertCount(1, $this->post->comments);
        $response->assertRedirect();
        $response->assertValid();
    }

    public function testDeleteComment(){
        $this->post(route('comment', $this->post->id), $this->commentData);
        $commentId = Comment::first()->id;

        $response = $this->delete(route('deleteComment', $commentId), ['_token' => csrf_token()]);
        $response->assertRedirect();
        $response->assertValid();
        unset($this->commentData['_token']);
        $this->assertDeleted('comments', $this->commentData);
        $this->assertCount(0, $this->post->comments);
    }
}
