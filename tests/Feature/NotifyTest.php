<?php

namespace Tests\Feature;

use App\Models\GroupUser;
use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;

class NotifyTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private $user;
    private $post_data;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Session::start();
        $this->user = User::factory()->create();
        $this->actingAs($this->user);
        $this->post_data = [
            '_token' => csrf_token(),
            'title' => 'title',
            'post_description' => 'Post description',
            'user_id' => $this->user->id,
            'category_id' => 1
        ];
    }

    public function testCheckCacheCreated(){
        $friend = User::factory()->hasAttached($this->user)->create();
        Cache::store('redis')->forget("new_posts_for_$friend->id");
        $this->post(route('posts.store'), $this->post_data);
        $this->assertTrue(Cache::store('redis')->has("new_posts_for_$friend->id"));
        $this->assertTrue(Cache::store('redis')->get("new_posts_for_$friend->id")['isNew']);
    }

    public function testNoNotifications(){
        $response = $this->get(route('showNewPosts'));
        $response->assertOk();
        $response->assertSeeText('No notifications');
    }

    public function testShowNewPosts(){
        $friend = User::factory()->hasAttached($this->user)->create();
        Cache::store('redis')->forget("new_posts_for_$friend->id");
        $this->post(route('posts.store'), $this->post_data);

        $this->actingAs($friend);
        $response = $this->get(route('showNewPosts'));

        $response->assertOk();
        $response->assertViewHas('posts');
        $response->assertViewHas('myPage', false);
        $this->assertNotTrue(Cache::store('redis')->get("new_posts_for_$friend->id")['isNew']);
        $this->assertTrue(empty(Cache::store('redis')->get("new_posts_for_$friend->id")['posts']));

        $response = $this->get(route('showNewPosts'));
        $response->assertViewHas('posts', []);
    }

    public function testDestroyPost(){
        $friend = User::factory()->hasAttached($this->user)->create();
        Cache::store('redis')->forget("new_posts_for_$friend->id");
        $this->post(route('posts.store'), $this->post_data);
        $post = $this->user->posts->last();

        $response = $this->delete(route('posts.destroy', $post->id), ['_token' => csrf_token()]);
        $response->assertRedirect();

        $this->actingAs($friend);
        $response = $this->get(route('showNewPosts'));
        $response->assertOk();
        $response->assertSeeText('No notifications');
        $response->assertViewHas('posts', []);
    }
}
