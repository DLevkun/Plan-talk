<?php

namespace Tests\Feature;

use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;

class PostTest extends TestCase
{

    use RefreshDatabase, WithFaker;

    private $user;
    private $post_data;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Session::start();
        $this->user = User::factory()->create();
        $this->actingAs($this->user);
        $this->post_data = [
            '_token' => csrf_token(),
            'title' => 'title',
            'post_description' => 'Post description',
            'user_id' => $this->user->id,
            'category_id' => 1
        ];
    }

    public function testIsPostDataValid(){

        $response = $this->post('posts', $this->post_data);

        $response->assertValid();
    }

    public function testIsPostDataInvalid(){

        $response = $this->post('posts', [
            '_token' => csrf_token(),
            'post_description' => 'Post description'
        ]);

        $response->assertInvalid();
    }

    public function testIsPostAdded(){

        $this->post('posts', $this->post_data);

        $this->assertCount(1, $this->user->posts->all());
    }

    public function testPostEditing(){
        $this->post('posts', $this->post_data);

        $postId = $this->user->posts->first()->id;

        $response = $this->get("posts/{$postId}/edit");
        $response->assertOk();
    }

    public function testPostUpdateValidation(){
        $this->get('/home');
        $this->post('posts', $this->post_data);

        $postId = $this->user->posts->first()->id;

        $response = $this->patch(route('posts.update', $postId), $this->post_data);
        $response->assertValid();
        $response->assertRedirect('/home?page=1');
        $response->assertSessionHas('post_success');
    }

    public function testShowCategoryPosts(){
        $response = $this->get(route('categoryPosts', 1));

        $response->assertOk();
        $response->assertViewHas('title', 'Category â„–1');
    }

    public function testRemainingImageAfterUpdating(){
        $image = UploadedFile::fake()->image('image.jpg');
        $post = Post::factory()->for($this->user)->create(['post_image' => $image]);
        $this->get('/home');

        $this->patch(route('posts.update', $post->id), $this->post_data);
        $updatedPost = Post::find($post->id);
        $this->assertEquals($post->post_image, $updatedPost->post_image);
    }

    public function testNoImageAfterUpdating(){
        $post = Post::factory()->for($this->user)->create(['post_image' => null]);
        $this->get('/home');

        $this->patch(route('posts.update', $post->id), $this->post_data);
        $updatedPost = Post::find($post->id);
        $this->assertEquals(null, $updatedPost->post_image);
    }

    public function testShowOneMyPost(){
        $post = Post::factory()->for($this->user)->create();
        $response = $this->get(route('posts.show', $post->id));

        $response->assertOk();
        $response->assertViewHas('myPage', true);
        $response->assertSee('Delete');
    }

    public function testShowOneOthersPost(){
        $otherUser = User::factory()->create();
        $post = Post::factory()->for($otherUser)->create();
        $response = $this->get(route('posts.show', $post->id));

        $response->assertOk();
        $response->assertViewHas('myPage', false);
    }

    public function testPostDestroy(){
        $this->session(['page' => 1]);
        $post = Post::factory()->for($this->user)->create();
        $this->get('/home');

        $response = $this->delete(route('posts.destroy', $post->id), ['_token' => csrf_token()]);

        $response->assertRedirect('/home?page=1');

        unset($this->post_data['_token']);
        $this->assertDeleted('posts', $this->post_data);
        $response->assertSessionHas('post_success');
        $this->assertCount(0, $this->user->posts->all());
    }
}
