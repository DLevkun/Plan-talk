<?php

namespace Tests\Feature;

use App\Models\User;
use App\Models\UsersFriends;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class FriendTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private $user;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create(['role_id' => 2]);
        $this->actingAs($this->user);
    }

    public function testAllFriendsPage(){
        $response = $this->get('/friends');

        $response->assertOk();
        $response->assertViewHas('friends', $this->user->users);
    }

    public function testFriendsSearchPage(){
        $response = $this->post('friends/search', ['search_field' => 'a']);
        $response->assertValid();
        $response->assertOk();
        $response->assertViewHas('search', 'a');
    }

    public function testFriendsSearchPageNoResults(){
        $this->user = User::factory()->create(['full_name' => 'Daria Levkun', 'role_id' => 2]);
        $this->actingAs($this->user);
        $response = $this->post('friends/search', ['search_field' => 'Levkun']);

        $response->assertValid();
        $response->assertOk();
        $response->assertSeeText('No matching results');
    }

    public function testShowFriendPage(){
        $response = $this->get(route('friends.show', 1));

        $response->assertOk();
        $response->assertViewIs('home');
        $response->assertViewHas(['myPage' => false, 'isAdmin' => false]);
    }

}
